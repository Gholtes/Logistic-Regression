dt$frate <- dt$fatal*10000/dt$pop
source('~/Documents/2018/Econometrics 2/Learning R/pooledOLS.R')
coeftest(pooledOLS, vcov=vcovHC(pooledOLS))
coeftest(aggregateOLS, vcov=vcovHC(aggregateOLS))
dt = data("ToothGrowth")
data("ToothGrowth")
data()
n <- 600
dem <- rnorm(n, mean = 0.5, sd = 0.25)
educ <- sample(1:10, n, replace=T)
dt = data.frame(dem = dem, educ = educ)
View(dt)
dt$gdp = dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 0.25)
plot(dt$educ, dt$gdp)
###Fit a reg
reg <- lm(gdp ~ dem + dem*educ + educ, data = dt)
reg
summary(reg)
dt$dem_educ <- dem*educ
###Fit a reg
reg <- lm(gdp ~ dem + dem_educ + educ, data = dt)
summary(reg)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
Library(MASS)
library(MASS)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
library(MASS, AER)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
library(AER)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem*educ + dem = 0")
)
###Fit a reg
reg <- lm(gdp ~ dem + dem*educ + educ, data = dt)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem*educ + dem = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ*2 + dem = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("2*dem:educ + dem = 0")
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
dt$gdp <- dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 0.5)
###Fit a reg
reg <- lm(gdp ~ dem + dem*educ + educ, data = dt)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
dt$gdp <- dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 1)
###Fit a reg
reg <- lm(gdp ~ dem + dem*educ + educ, data = dt)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
dt$gdp <- dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 4)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
###Fit a reg
reg <- lm(gdp ~ dem + dem*educ + educ, data = dt)
linearHypothesis(reg,
vcov = vcovHC(reg),
c("dem:educ + dem = 0")
)
#run tests
#all tests, with differing values for education
tests = c("dem:educ + dem = 0",
"2*dem:educ + dem = 0",
"3*dem:educ + dem = 0",
"4*dem:educ + dem = 0",
"5*dem:educ + dem = 0",
"6*dem:educ + dem = 0",
"7*dem:educ + dem = 0",
"8*dem:educ + dem = 0",
"9*dem:educ + dem = 0",
"10*dem:educ + dem = 0"
)
tests[1]
linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
test = tests[educ]
linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
for (i = 1:10) {
test = tests[i]
linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
}
for (i = 1:10) {
test = tests[i]
linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
}
for (i in 1:10) {
test = tests[i]
linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
}
Fstat = linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
Fstat
Fstat[1]
Fstat[2]
Fstat[3]
Fstat[4]
Fstat[4][2]
Fstat[4:2]
Fstat[4]
Fstat[2, 4]
Fstat[2, 3]
results <- matrix(ncol = 4, nrow = 10, colnames=c("educ", "F", "P", "Significant"))
results <- matrix(ncol = 4, nrow = 10)
colnames(results)<- c("educ", "F", "P", "Significant")
for (i in 1:10) {
test <- tests[i]
Fstat <- linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
Pval_of_test <- Fstat[2, 4]
Fstat_of_test <- Fstat[2, 3]
results[i, 1] = i
results[i, 2] = Fstat_of_test
results[i, 3] = Pval_of_test
results[i, 4] = Pval_of_test < 0.05
}
View(results)
dt$gdp <- dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 6)
###Fit a reg
reg <- lm(gdp ~ dem + dem*educ + educ, data = dt)
for (i in 1:10) {
test <- tests[i]
Fstat <- linearHypothesis(reg,
vcov = vcovHC(reg),
c(test)
)
Pval_of_test <- Fstat[2, 4]
Fstat_of_test <- Fstat[2, 3]
#record results
results[i, 1] = i
results[i, 2] = Fstat_of_test
results[i, 3] = Pval_of_test
results[i, 4] = Pval_of_test < 0.05
}
View(results)
source('~/.active-rstudio-document')
View(results)
source('~/.active-rstudio-document')
View(results)
dt$gdp <- dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 5)
source('~/.active-rstudio-document')
View(results)
source('~/.active-rstudio-document')
View(results)
dt$gdp <- dt$dem + dt$educ + dt$dem*dt$educ + rnorm(n, mean = 0, sd = 10)
source('~/.active-rstudio-document')
View(results)
plot(dt$educ, dt$gdp)
plot(dt$dem, dt$gdp)
source('~/Documents/2018/Econometrics 2/Tutorial12.R')
library(MASS)
abbey
x1 = rnorm(1000, mean = 0, sd= 10)
x1 = rnorm(1000, mean = 0, sd= 10)
x2 = rnorm(1000, mean = 0, sd= 10)
x3 = x1 = rnorm(1000, mean = 10, sd= 10)
x4 = x1 = rnorm(1000, mean = 0, sd= 5)
t.test(x1,x2)
t.test(x1,x3)
x3 = x1 = rnorm(1000, mean = 5, sd= 10)
t.test(x1,x3)
t.test(x1,x3)
x3 = x1 = rnorm(1000, mean = 5, sd= 10)
x3 = rnorm(1000, mean = 5, sd= 10)
x1 = rnorm(1000, mean = 0, sd= 10)
t.test(x1,x3)
x3 = rnorm(1000, mean = 3, sd= 10)
x3 = rnorm(1000, mean = 3, sd= 10)
t.test(x1,x3)
x3 = rnorm(1000, mean = 1, sd= 10)
t.test(x1,x3)
x3 = rnorm(1000, mean = 2, sd= 10)
t.test(x1,x3)
x4  = rnorm(1000, mean = 0, sd= 8)
t.test(x1,x4)
x4  = rnorm(1000, mean = 0, sd= 5)
t.test(x1,x4)
source('~/Documents/Tutoring/ttests.R')
T1.2$statistic
T1.2$estimate
T1.2$p.value
print(T1.2)
X5 = rnorm(100)
t.test(X1,X5)
t.test(x1,X5)
source('~/Documents/Tutoring/ttests.R')
y = 2 + 10*x1+rnorm(1000)
plot(x1,y)
y = 2 + 10*x1+rnorm(1000)
y = 2 + 10*x1+rnorm(1000, mean=0, sd=5)
plot(x1,y)
y = 2 + 10*x1+rnorm(1000, mean=0, sd=10)
plot(x1,y)
y = 2 + 2*x1+rnorm(1000, mean=0, sd=10)
plot(x1,y)
help(plot)
plot(x1,y,
col = "blue",
pch = 10)
plot(x1,y,
col = "blue",
pch = 16)
plot(x1,y,
col = rgb(0,0.4,1,0.3),
pch = 16)
plot(x1,y,
col = rgb(0,0.4,0.8,0.3),
pch = 16)
plot(x1,y,
col = rgb(0,0.4,0.4,0.3),
pch = 16)
plot(x1,y,
col = rgb(0,0.6,0.7,0.3),
pch = 16)
plot(x1,y,
col = rgb(0,0.8,1,0.3),
pch = 16)
6
0.7
plot(x1,y,
col = rgb(0,0.6,0.7,0.3),
pch = 16)
reg = lm(y~x1)
librray(car)
library(car)
ttest = linearHypothesis(reg)
ttest = linearHypothesis(reg, hypothesis.matrix = c("intercept"=0))
ttest = linearHypothesis(reg, hypothesis.matrix = c("(Intercept) = 0"))
ttest = linearHypothesis(reg, hypothesis.matrix = c("(Intercept) = 0", "x1 = 0"))
ttest
#Test if the slope coef is equal to a value, eg 3
ttest = linearHypothesis(reg, hypothesis.matrix = c("x1 = 3"))
ttest
#Test if the slope coef is equal to a value, eg 3
linearHypothesis(reg, hypothesis.matrix = c("x1 = 3"))
#Test if the slope coef is less than a value, eg 3
linearHypothesis(reg, hypothesis.matrix = c("x1 < 3"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 2.1", "(intercept)=3"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 2.1", "(Intercept)=3"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 2.1", "(Intercept)=2.5"))
#test linear combos
linearHypothesis(reg, hypothesis.matrix = c("x1 + (Intercept) = 5"))
coef.test
clear
#lets see the default ttests that R gives us
summary(reg)
source('~/Documents/Tutoring/ttests.R')
T1.2
source('~/Documents/Tutoring/ttests.R')
T1.2
T1.2
T1.3
T1.4
reg
summary(reg)
#Test if the slope coef is equal to a value, eg 3
linearHypothesis(reg, hypothesis.matrix = c("x1 = 3"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 2.1", "(Intercept)=2.5"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 2", "(Intercept)=2"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 2", "(Intercept)=2"))
#Joint tests of multiple coeff.
linearHypothesis(reg, hypothesis.matrix = c("x1 = 9", "(Intercept)=2"))
#test linear combos
linearHypothesis(reg, hypothesis.matrix = c("x1 + (Intercept) = 5"))
#test linear combos
linearHypothesis(reg, hypothesis.matrix = c("x1 + (Intercept) = 4"))
install.packages("maxLik", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(maxLik)
maxLik()
loglik <- function(param) {
mu <- param[1]
sigma <- param[2]
ll <- -0.5*N*log(2*pi) - N*log(sigma) - sum(0.5*(x - mu)^2/sigma^2)
ll
}
x <- rnorm(100, 1, 2) # use mean=1, stdd=2
N <- length(x)
res <- maxLik(loglik, start=c(0,1))
res
mean(x)
sd(x)
#Define the logliklihood for the normal dist
loglik <- function(param) {
mu <- param[1]
sigma <- param[2]
ll <- -0.5*N*log(2*pi) - N*log(sigma) - sum(0.5*(x - mu)^2/sigma^2)
ll
}
#global variables, with names that match out loglik function!
x <- rnorm(100, 1, 2)
N <- length(x)
loglik(c(1,2))
loglik(c(1,3))
loglik(c(1,1))
loglik(c(1,2.1))
res <- maxLik(loglik, start=c(0,1)) # use 􏰀wrong􏰀 start values
summary( res )
#test fucntion
#"correct values"
print(loglik(c(1,2)))
#"incorrect values"
print(loglik(c(5,7)))
#Solve!
res <- maxLik(loglik, start=c(0,0)) # use 􏰀wrong􏰀 start values
summary( res )
#Solve!
res <- maxLik(loglik, start=c(0,0.1)) # use 􏰀wrong􏰀 start values
summary( res )
#Solve!
res <- maxLik(loglik, start=c(0,1)) # use 􏰀wrong􏰀 start values
summary( res )
#Solve!
res <- maxLik(loglik, start=c(1,8)) # use 􏰀wrong􏰀 start values
summary( res )
#Solve!
res <- maxLik(loglik, start=c(1.2,3)) # use 􏰀wrong􏰀 start values
summary( res )
#compare:
print(mean(x), sd(x))
#compare:
print(mean(x) sd(x))
print(sd(x))
#compare:
print(mean(x))
#compare:
res
#compare:
res$estimate
#compare:
param.actual = c(mean(x), sd(x))
param.est = res$estimate
param.actual
param.est
library(maxLik)
#global variables, with names that match out loglik function!
x <- rnorm(100, 1, 2)
N <- length(x)
help("maxLik")
vector = c(1,2,3)
vector
#Define the logliklihood for the normal dist
loglik <- function(param) {
mu <- param[1]
sigma <- param[2]
ll <- -0.5*N*log(2*pi) - N*log(sigma) - sum(0.5*(x - mu)^2/sigma^2)
ll
}
loglik(c(1,3))
loglik(c(1,2))
loglik(c(1,1))
hist(x)
#test fucntion
#"correct values"
print(loglik(c(1,2)))
#"incorrect values"
print(loglik(c(5,7)))
#Solve!
res <- maxLik(loglik, start=c(1.2,3)) # use 􏰀wrong􏰀 start values
#"incorrect values"
print(loglik(c(5,7)))
#Solve!
res <- maxLik(loglik, start=c(1.2,3)) # use 􏰀wrong􏰀 start values
#global variables, with names that match out loglik function!
x <- rnorm(100, 1, 2)
N <- length(x)
#Solve!
res <- maxLik(loglik, start=c(1.2,3)) # use 􏰀wrong􏰀 start values
summary( res )
#compare:
param.actual = c(mean(x), sd(x))
#Solve!
res <- maxLik(loglik, start=c(1.2,8)) # use 􏰀wrong􏰀 start values
summary( res )
#Solve!
res <- maxLik(loglik, start=c(12,8)) # use 􏰀wrong􏰀 start values
#Solve!
res <- maxLik(loglik, start=c(1002,8)) # use 􏰀wrong􏰀 start values
summary( res )
warnings()
x1 = rnorm(1000)
x2 = rnrom(1000)
x2 = rnorm(1000)
x3 = rnorm(1000)
y_ = 3*x1-2x2+x3^2+rnorm(1000)
y_ = 3*x1-2x2+x3**2+rnorm(1000)
y_ = 3*x1-2x2+x3*x3+rnorm(1000)
y_ = 3*x1-2*x2+x3*x3+rnorm(1000)
plot(x1, y_)
plot(x2, y_)
plot(x3, y_)
min(y_)
max(y_)
y = 3*x1 > 0 & -2*x2 > 0
y = 3*x1 > 0 & -2*x2 > 0 || rnorm(1000)>1
y
y <- as.numeric(y)
y
y[2]
y = 3*x1 > 0
y
y = as.numeric(3*x1 > 0)
y1 = as.numeric(3*x1 > 0)
y1
y2 = as.numeric(-2*x2 > 0)
y2
ye = as.numeric(rnorm(1000)>2)
ye
ye = as.numeric(rnorm(1000)>1)
ye
y = y1*y2
y
y = y1&y2
y
y = as.numeric((y1|y2)&ye)
y
y = as.numeric((y1|y2)&ye)
ye = as.numeric(rnorm(1000)<1)
y = as.numeric((y1|y2)&ye)
y
plot(x1, y)
plot(x2, y)
logit(1)
function logit(x){}
function logit(x): {}
help function()
help(fuction)
help(function())
help(function
)
help("functio')
)
hhhs
s
ss
s
s
s
ss)
""
()
source('~/Development/Logit/TestDataMaker.R')
source('~/Development/Logit/TestDataMaker.R')
logreg
